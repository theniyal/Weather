{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["titles","react_default","a","createElement","className","form","props","onSubmit","getWeather","type","name","placeholder","weather","state","city","country","temperature","humidity","description","error","API_KEY","App","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","sent","json","_this","setState","sys","main","temp","undefined","stop","Titles","Form","this","Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAWeA,EATA,WACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,4DCQGE,EAZD,SAACC,GACX,OACIL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,QAAMI,SAAYD,EAAME,YACpBP,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAAWV,EAAAC,EAAAC,cAAA,WACtDF,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAAcV,EAAAC,EAAAC,cAAA,WAC5DF,EAAAC,EAAAC,cAAA,kCCODS,EAbC,SAACN,GAEb,OACIL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACVE,EAAMO,MAAMC,MAAQR,EAAMO,MAAME,SAAWd,EAAAC,EAAAC,cAAA,sBAAcG,EAAMO,MAAMC,KAA1B,KAAkCR,EAAMO,MAAMC,MACzFR,EAAMO,MAAMC,MAAQb,EAAAC,EAAAC,cAAA,yBAAiBG,EAAMO,MAAMG,aACjDV,EAAMO,MAAMC,MAAQb,EAAAC,EAAAC,cAAA,sBAAcG,EAAMO,MAAMI,UAC9CX,EAAMO,MAAMC,MAAQb,EAAAC,EAAAC,cAAA,yBAAiBG,EAAMO,MAAMK,aACjDZ,EAAMO,MAAMM,OAASlB,EAAAC,EAAAC,cAAA,SAAIG,EAAMO,MAAMM,SCJ5CC,SAAU,oCAqDDC,6MAlDbR,MAAQ,CACNC,KAAM,KACNC,QAAS,KACTC,YAAa,KACbC,SAAU,KACVC,YAAa,KACbC,MAAO,QAETX,iDAAa,SAAAc,EAAOC,GAAP,IAAAT,EAAAC,EAAAS,EAAAC,EAAA,OAAAC,EAAAxB,EAAAyB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACTP,EAAEQ,iBACIjB,EAAOS,EAAES,OAAOC,SAASnB,KAAKoB,MAC9BnB,EAAUQ,EAAES,OAAOC,SAASlB,QAAQmB,MAHjCN,EAAAE,KAAA,EAIcK,MAAM,qDAAqDrB,EAAK,IAAIC,EAAQ,UAAYK,EAAQ,iBAJ9G,cAIHI,EAJGI,EAAAQ,KAAAR,EAAAE,KAAA,EAKUN,EAASa,OALnB,OAKHZ,EALGG,EAAAQ,KAONtB,GAAQC,EAETuB,EAAKC,SAAS,CACZzB,KAAMW,EAAKf,KACXK,QAASU,EAAKe,IAAIzB,QAClBC,YAAaS,EAAKgB,KAAKC,KACvBzB,SAAUQ,EAAKgB,KAAKxB,SACpBC,YAAaO,EAAKb,QAAQ,GAAGM,YAC7BC,MAAO,OAKTmB,EAAKC,SAAS,CACZzB,UAAM6B,EACN5B,aAAS4B,EACT3B,iBAAa2B,EACb1B,cAAU0B,EACVzB,iBAAayB,EACbxB,MAAO,6BA1BF,yBAAAS,EAAAgB,SAAAtB,oIAgCX,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC0C,EAAD,MACA5C,EAAAC,EAAAC,cAAC2C,EAAD,CAAMtC,WAAcuC,KAAKvC,aACzBP,EAAAC,EAAAC,cAAC6C,EAAD,CAASnC,MAAOkC,KAAKlC,gBA7CXoC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f640ab6e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst titles = () => {\r\n    return(\r\n        <div className=\"title-div\">\r\n            <h1> Weather Finder </h1>\r\n            <p> Find out temperature conditions and more... </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default titles;","import React from 'react'\r\n\r\n const form = (props) => {\r\n    return(\r\n        <div className=\"form-div\">\r\n            <form onSubmit = {props.getWeather}>\r\n                <input type=\"text\" name=\"city\" placeholder=\"city...\"/><br></br>\r\n                <input type=\"text\" name=\"country\" placeholder=\"country...\"/><br></br>\r\n                <button> Get Weather </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default form","import React from 'react'\r\n\r\nconst weather = (props) => {\r\n   \r\n    return(\r\n        <div className=\"weather-div\">\r\n            {props.state.city && props.state.country && <p>Location: {props.state.city}, {props.state.city}</p>}\r\n            {props.state.city && <p>Temperature: {props.state.temperature}</p>}\r\n            {props.state.city && <p>Humidity: {props.state.humidity}</p>}\r\n            {props.state.city && <p>Description: {props.state.description}</p>}\r\n            {props.state.error && <p>{props.state.error}</p>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default weather","import React, { Component} from 'react'\nimport Titles from './components/Titles'\nimport Form from './components/Form'\nimport Weather from './components/Weather'\nimport './App.css'\n\nconst API_KEY = \"21f6906b9e0f516bce8f2723bf5a7686\";\n\nclass App extends Component {\n  state = {\n    city: null,\n    country: null,\n    temperature: null,\n    humidity: null,\n    description: null,\n    error: null\n  }\n  getWeather = async (e) => {\n      e.preventDefault();\n      const city = e.target.elements.city.value\n      const country = e.target.elements.country.value\n      const api_call = await fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\"+city+\",\"+country+\"&appid=\" + API_KEY+\"&units=metric\");\n      const data = await api_call.json()\n     \n      if(city && country)\n      {\n        this.setState({\n          city: data.name,\n          country: data.sys.country,\n          temperature: data.main.temp,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          error: null\n        })\n      }\n      else\n      {\n        this.setState({\n          city: undefined,\n          country: undefined,\n          temperature: undefined,\n          humidity: undefined,\n          description: undefined,\n          error: \"Please enter the values.\"\n        })\n      }\n  }\n  render(){\n   \n    return (\n      <div className=\"box\">\n        <Titles />\n        <Form getWeather = {this.getWeather} />\n        <Weather state={this.state}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}